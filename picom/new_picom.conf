##################################
#            Animations          #
##################################
@include "picom-animations.conf"

#################################
#             Shadows           #
#################################
# enable client-side shadows on windows
shadow = false;

#################################
#           Fading              #
#################################
# fade windows in/out when openin/closing, 
fading = false;

#################################
#           Opacity             #
#################################
# opacity of inactive windows [0.1 - 1.0]       - default:1.0
inactive-opacity = 0.95;

# opacity of active windows [0.1 - 1.0]         - default:1.0
active-opacity = 0.95;

# let inactive-opacity override the_NET_WM_WINDOW_OPACITY values of windows
inactive-opacity-override = false;

# Detect _NET_WM_WINDOW_OPACITY on client windows
detect-client-opacity = false;

# make transparent windows clip other windows like non-transparent windows do instead of blending on top of them
transparent-clipping = false;

#################################
#     Background-Blurring       #
#################################
# dual-filter kawase blur
blur:
  {
    method = "dual_kawase";
    strength = 5
  };

# blur background of windows when the window frame is not opaque
blur-background-frame = false;

# use fixed blur strength rather than adjusting according to window opacity
blur-background-fixed = true;

# exclude conditions for background blur
blur-background-exclude = [
  "window_type = 'dock'", 
  "window_type = 'desktop'",
  "_GTK_FRAME_EXTENTS@",
];

#################################
#            Corners            #
#################################
# set the radius of rounded window corners
corner-radius = 5;

# try to detect windows with rounded corners and don't consider them shaped windows
detect-rounded-corners = false;

#################################
#       General Settings        #
#################################
# Specify the backend to use: 'dummy', 'xrender', 'egl', 'glx'  - default:'glx'
backend = "glx";

# use X Sync to sync client's draw calls to ensure all draw calls are finished before picom starts drawing
xrender-sync-fence = true;

# disable vsync-aware frame pacing
#   -> by default, picom only renders once per vblank interval
#   -> picom also renders as late as possible to minimize latency from screen updates
#   -> this can sometimes cause stuttering or lowered frame rate
no-frame-pacing = true;

# enable/disable VSync
vsync = true;

# disable the use of damage information
no-use-damage = true;

# GLX backend: Avoid using stencil buffer, useful if you don't have a stencil buffer.
# Might cause incorrect opacity when rendering transparent content (but never
# practically happened) and may not work with blur-background.
# My tests show a 15% performance boost. Recommended.
glx-no-stencil = true;

#################################
#          LOGGING              #
#################################
# set the log level: 'trace', 'verbose', 'debug', 'info', 'warn', 'error' 
#   -> increasing level of importance
log-level = "info";

# set the log file
log-file = "/home/rdr/.config/picom/picom_log.txt";

# show all X errors -> for debugging
show-all-xerrors = true;