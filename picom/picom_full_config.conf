##################################
#            Animations          #
##################################
@include "picom-animations.conf"

#################################
#             Shadows           #
#################################
# enable client-side shadows on windows
#   -> windows with _NET_WM_WINDOW_TYPE_DESKTOP never get shadow, 
#      unless explicitly requested using the wintypes option
shadow = false;

# blur radius for shadows [pixels]                  - default:12
shadow-radius = 12;

# opacity of shadows - default:0.75
shadow-opacity = 0.75;

# left offet foor shadows [pixels]                  - default:-15
shadow-offset-x = -20;

# top offset for shadows [pixels]                   - default:-15
shadow-offset-y = -20;

# color of shadow [hex string, i.e. '#000000']
shadow-color = "#000000";

# red color value of shadow [0.0 - 1.0] - default:0
shadow-red = 0;

# green color value of shadow [0.0 - 1.0] - default:0
shadow-green = 0;

# blue color value of shadow [0.0 - 1.0] - default:0
shadow-blue = 0;

# do not paint shadows on shaped windows
shadow-ignore-shaped = true;

# specify a list of conditions of windows that should have no shadow
shadow-exclude = [];

# specify a list of conditions of windows that should have no shadow painted over
clip-shadow-above = [];

#################################
#           Fading              #
#################################
# fade windows in/out when openin/closing, 
fading = false;

# opacity change between steps while fading in      - default:0.028
fade-in-step = 0.028;

# opacity change between steps while fading out     - default:0.03
fade-out-step = 0.03;

# time between steps in fade step [msec]            - default:10, >0
fade-delta = 10;

# specify a list of conditions of windows that should not be faded
fade-exclude = [];


#################################
#           Opacity             #
#################################
# opacity of inactive windows [0.1 - 1.0]       - default:1.0
inactive-opacity = 0.95;

# opacity of active windows [0.1 - 1.0]         - default:1.0
active-opacity = 0.95;

# dim inactive windows - default:0.0
inactive-dim = 0.0

# let inactive-opacity override the_NET_WM_WINDOW_OPACITY values of windows
inactive-opacity-override = false;

# opacity of window titlebars and borders [0.1 - 1.0]       - default:disabled
# frame-opacity = 0.1

# Detect _NET_WM_WINDOW_OPACITY on client windows
detect-client-opacity = false;

# make transparent windows clip other windows like non-transparent windows do instead of blending on top of them
transparent-clipping = false;

#################################
#     Background-Blurring       #
#################################
# Box blur
# blur:
#   {
#     method = "box";
#     size = 30;
#     kernel = "7x7box"
#   };

# dual-filter kawase blur
blur:
  {
    method = "dual_kawase";
    strength = 5
  };

# gaussian blur
# blur:
#   {
#     method = "gaussian";
#     size = 20;
#     deviation = 5.0;
#   };

# blur background of windows when the window frame is not opaque
blur-background-frame = false;

# use fixed blur strength rathe than adjusting according to window opacity
blur-background-fixed = true;

# exclude conditions for background blur
blur-background-exclude = [
  "window_type = 'dock'", 
  "window_type = 'desktop'",
  "_GTK_FRAME_EXTENTS@",
];

#################################
#            Corners            #
#################################
# set the radius of rounded window corners      -default:0
#   -> does not interact well with trasparent-clipping
corner-radius = 5;

# try to detect windows with rounded corners and don't consider them shaped windows
#   -> accuracy not very high
detect-rounded-corners = false;

# specify a list of corner radius rules
#   -> overrides corner radii of matching windows
#   -> overrides rounded-corner-exclude
#   -> overrides defalt exclulsion of fullscreen windows
# corner-radius-rules = []

# exclude conditions for rounded corners
rounded-corners-exclude = []

#################################
#       General Settings        #
#################################
# Specify the backend to use: 'dummy', 'xrender', 'egl', 'glx'  - default:'glx'
backend = "glx";

# use X Sync to sync client's draw calls to ensure all draw calls are finished before picom starts drawing
xrender-sync-fence = true;

# disable vsync-aware frame pacing
#   -> by default, picom only renders once per vblank interval
#   -> picom also renders as late as possible to minimize latency from screen updates
#   -> this can sometimes cause stuttering or lowered frame rate
no-frame-pacing = false;

# enable/disable VSync
vsync = true;

# disable the use of damage information
no-use-damage = true;

# GLX backend: Avoid using stencil buffer, useful if you don't have a stencil buffer.
# Might cause incorrect opacity when rendering transparent content (but never
# practically happened) and may not work with blur-background.
# My tests show a 15% performance boost. Recommended.
glx-no-stencil = true;

#################################
#          LOGGING              #
#################################
# set the log level: 'trace', 'verbose', 'debug', 'info', 'warn', 'error' 
#   -> increasing level of importance
log-level = "info";

# set the log file
log-file = "/home/rdr/.config/picom/picom_log.txt";

# show all X errors -> for debugging
show-all-xerrors = true;